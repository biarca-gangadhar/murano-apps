#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: io.murano.apps.docker.kubernetes
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  conf: io.murano.configuration

Name: HybridCloudAutoScale

Extends: std:Application

Properties:
  maxMinionCount:
    Contract: $.int().notNull()
  maxCPUUsage:
    Contract: $.int()
    Default: 100
  minCPUUsage:
    Contract: $.int()
    Default: 0
  openstackIP:
    Contract: $.string()
    Default: ''
  tenantName:
    Contract: $.string()
    Default: ''
  username:
    Contract: $.string()
    Default: ''
  userPassword:
    Contract: $.string()
    Default: ''
  enableExistingNodes:
    Contract: $.bool()
    Default: false
  existingNodes:
    Contract: $.string()
    Default: ''
  existingNodeUsername:
    Contract: $.string()
    Default: ''
  existingNodePassword:
    Contract: $.string()
    Default: ''
  enableAutoCreationGCE:
    Contract: $.bool()
    Default: false
  openVPNServerIP:
    Contract: $.string()
    Default: ''
  gcePrivateKey:
    Contract: $.string()
    Default: ''
  gceMinionCount:
    Contract: $.int()
    Default: 0
  enableAutoScaling:
    Contract: $.bool()
    Default: false
  gceNodesList:
    Contract:
      - name: $.string()
        ip: $.string()
        externalIp: $.string()
        autoscale: $.string()
    Usage: InOut
  existingNodesList:
    Contract:
      - ip: $.string()
        autoscale: $.string()
    Usage: InOut
  availableNodesList:
    Contract: [$.string()]
    Usage: InOut

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()
      - $._cluster: $.find(KubernetesCluster).require()

  setupGCEScale:
    Body:
      - If: not $.getAttr(GCEScaleSetup, false)
        Then:
          - If: $.enableExistingNodes = true
            Then:
              - If: $.existingNodes = '' or $.existingNodeUsername = '' or $.existingNodePassword = ''
                Then:
                  - Throw: EmptyValuesError
                    Message: 'You should fill Nodes, Username and Password to add existing OpenVPN nodes to cluster'
          - If: $.enableAutoCreationGCE = true
            Then:
              - If: $.openVPNServerIP = '' or $.gcePrivateKey = ''
                Then:
                  - Throw: EmptyValuesError
                    Message: 'Missing Open VPN Server IP or GCE service account private key to enable Auto create/delete GCE instances'
              - $resources: new(sys:Resources)
              - $template: $resources.yaml('GCEScaleSetup.template')
              - $._cluster.masterNode.instance.agent.call($template, $resources, 600)

              - $linux: new(conf:Linux)
              - $path: '/etc/autoscale/MuranoAppDevelopment.json'
              - $linux.putFile($._cluster.masterNode.instance.agent, $.gcePrivateKey, $path)
          - If: $.enableAutoCreationGCE = true or $.enableExistingNodes = true
            Then:
              - $.availableNodesList: $.existingNodes.split(',')
              - $._environment.reporter.report($this, 'Setting up GCE scaling')
              - $resources: new(sys:Resources)
              - $template: $resources.yaml('GCECommonFilesSetup.template')
              - $._cluster.masterNode.instance.agent.call($template, $resources, 600)
          - $.setAttr(GCEScaleSetup, true)

  setupAutoscale:
    Body:
      - If: not $.getAttr(autoscaleConfigured, false)
        Then:
          - If: $.enableAutoScaling = true
            Then:
              - If: $.maxCPUUsage = '' or $.minCPUUsage = '' or $.tenantName = '' or $.username = '' or $.userPassword = ''
                Then:
                  - $._environment.reporter.report($this, 'Autoscale not configured because empty values found')
                  - $.setAttr(autoscaleConfigured, true)
                  - Return:
              - $resources: new(sys:Resources)
              - If: $.enableExistingNodes = false
                Then:
                  - $.staticNodes: 0
                Else:
                  - $.existingNodesArray: $.existingNodes.split(',')
                  - $.staticNodes: len($.existingNodesArray)
              - If: $.enableAutoCreationGCE = false
                Then:
                  - $.autoCreationNodes: 0
                Else:
                  - $.autoCreationNodes: $.gceMinionCount
              - $totalGCENodeCount: $.staticNodes + $.autoCreationNodes
              - $._environment.reporter.report($this, 'Setting up Autoscale on Master Node')
              - $template: $resources.yaml('AutoScale.template').bind(dict(
                    maxMinionCount => $.maxMinionCount,
                    maxCPUUsage => $.maxCPUUsage,
                    minCPUUsage => $.minCPUUsage,
                    ip => $._cluster.masterNode.getIp(),
                    environmentName =>  $._environment.name,
                    openstackIP => $.openstackIP,
                    tenantName => $.tenantName,
                    username => $.username,
                    userPassword => $.userPassword,
                    totalGceNodes => $totalGCENodeCount
                  ))
              - $._cluster.masterNode.instance.agent.call($template, $resources)
          - $.setAttr(autoscaleConfigured, true)

  addNode2Cluster:
    Arguments:
      - autoscale:
          Contract: $.string().notNull()
      - nodeIp:
          Contract: $.string().notNull()
      - username:
          Contract: $.string().notNull()
      - password:
          Contract: $.string()
          Default: ''
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('AddGceNode.template').bind(dict(
            autoscale => $autoscale,
            masterIp => $._cluster.masterNode.getIp(),
            nodeIp => $nodeIp,
            username => $username,
            password => $password
          ))
      - $msg: 'Adding node {0} to Cluster'
      - $._environment.reporter.report($this, $msg.format($nodeIp))
      - $._cluster.masterNode.instance.agent.call($template, $resources, 600)

  deleteNodeFromCluster:
    Arguments:
      - nodeIp:
          Contract: $.string().notNull()
      - username:
          Contract: $.string().notNull()
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('DeleteGceNode.template').bind(dict(
            ip => $nodeIp,
            username => $username
          ))
      - $._cluster.masterNode.instance.agent.call($template, $resources, 600)

  addExistingNode:
    Arguments:
      - autoscale:
          Contract: $.string().notNull()
    Body:
      - If: len($.existingNodesList) < len($.existingNodes.split(','))
        Then:
          - $count: 0
          - $ip: $.availableNodesList[0]
          - $msg: 'Existing node {0} is available'
          - $._environment.reporter.report($this, $msg.format($ip))
          - $.addNode2Cluster($autoscale, $ip, $.existingNodeUsername, $.existingNodePassword)
          - $currentNode: dict(ip => $ip, autoscale => $autoscale)
          - $.existingNodesList: $.existingNodesList + list($currentNode)
          - $.availableNodesList: $.availableNodesList.delete(0)
          - Return: 0

  deleteExistingNode:
    Arguments:
      - autoscale:
          Contract: $.string().notNull()
    Body:
      - $count: len($.existingNodesList)
      # Check the last node in the list which has same flag as $atoscale
      - While: $count > 0
        Do:
          - $count: $count - 1
          - $node: $.existingNodesList[$count]
          - If: $node.autoscale = $autoscale
            Then:
              - $ip: $node.ip
              - $msg: 'Deleting existing node {0} from cluster'
              - $._environment.reporter.report($this, $msg.format($ip))
              - $.deleteNodeFromCluster($ip, $.existingNodeUsername)
              - $.existingNodesList: $.existingNodesList.delete($count)
              - $.availableNodesList: $.availableNodesList.append($ip)
              - Return:

  addGceNode:
    Arguments:
      - autoscale:
          Contract: $.string().notNull()
    Body:
      - If: len($.gceNodesList) > $.gceMinionCount or len($.gceNodesList) = $.gceMinionCount
        Then:
          - $._environment.reporter.report($this, 'All GCE nodes maxed')
          - Return:
      - $resources: new(sys:Resources)
      - $.name: format('murano-k8s-{0}', randomName())
      - $msg: 'Creating a new GCE instance {0}'
      - $._environment.reporter.report($this, $msg.format($.name))

      - $template: $resources.yaml('CreateGceInstance.template').bind(dict(
            name => $.name,
            zone => 'us-central1-f'
          ))
      - $gce_ip: $._cluster.masterNode.instance.agent.call($template, $resources, 600)
      - $msg: 'GCE instance created with external IP: {0}'
      - $._environment.reporter.report($this, $msg.format($gce_ip))
      - Try:
        - $._environment.reporter.report($this, 'Verifying and installing prerequisites')
        - $template: $resources.yaml('CheckPrerequisites.template').bind(dict(
              ip => $gce_ip,
              username => 'root',
              password => ''
            ))
        - $._cluster.masterNode.instance.agent.call($template, $resources, 600)
        - $._environment.reporter.report($this, 'Establishing VPN Connection')
        - $template: $resources.yaml('EstablishVPNConnection.template').bind(dict(
              ip => $gce_ip,
              openVPNServerIP => $.openVPNServerIP
            ))
        - $tap_ip: $._cluster.masterNode.instance.agent.call($template, $resources, 600)
        - $msg: 'VPN connection established with IP: {0}'
        - $._environment.reporter.report($this, $msg.format($tap_ip))
        - $.addNode2Cluster($autoscale, $tap_ip, 'root', '')
        Catch:
        - As: e
          Do:
          - $._environment.reporter.report_error($this, $e.message)
          - $msg: 'Deleting instance {0}'
          - $._environment.reporter.report($this, $msg.format($.name))
          - $.deleteGoogleInstance($.name)
          - Return:
      - $dict: dict(name => $.name, externalIp => $gce_ip, ip => $tap_ip, autoscale => $autoscale)
      - $.gceNodesList: $.gceNodesList + list($dict)


  deleteGceNode:
    Arguments:
      - autoscale:
          Contract: $.string().notNull()
    Body:
      - If: len($.gceNodesList) = 0
        Then:
          - $._environment.reporter.report($this, 'No GCE nodes to delete')
          - Return:
      - $instanceName: ''
      - $ip: ''
      - $count: len($.gceNodesList)
      - While: $count > 0
        Do:
          - $count: $count - 1
          - $mydict: $.gceNodesList[$count]
          - If: $mydict.autoscale = $autoscale
            Then:
              - $instanceName: $mydict.name
              - $ip: $mydict.ip
              - $.gceNodesList: $.gceNodesList.delete($count)
              - Break:
      - If: $instanceName = '' and  $ip = ''
        Then:
          - Return:
      - $msg: 'Deleting node {0} from cluster'
      - $._environment.reporter.report($this, $msg.format($ip))
      - $.deleteNodeFromCluster($ip, 'root')
      - $.deleteGoogleInstance($instanceName)
      - Return: 0

  deleteGoogleInstance:
    Arguments:
      - instanceName:
          Contract: $.string().notNull()
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('DeleteGceInstance.template').bind(dict(
            name => $instanceName,
            zone => 'us-central1-f'
          ))
      - $msg: 'Deleting instance {0} from cloud'
      - $._environment.reporter.report($this, $msg.format($instanceName))
      - $._cluster.masterNode.instance.agent.call($template, $resources, 600)
