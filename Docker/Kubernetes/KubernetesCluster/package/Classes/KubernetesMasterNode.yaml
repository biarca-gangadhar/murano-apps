#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: io.murano.apps.docker.kubernetes
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system

Name: KubernetesMasterNode

Extends: KubernetesNode

Properties:
  maxMinionCount:
    Contract: $.string()
  minionCount:
    Contract: $.string()
  maxCPUusage:
    Contract: $.string()
  minCPUusage:
    Contract: $.string()
  openstackIP:
    Contract: $.string()
  tenantName:
    Contract: $.string()
  userName:
    Contract: $.string()
  userPassword:
    Contract: $.string()
  enableExistingNodes:
    Contract: $.bool()
    Default: false
  existingNodes:
    Contract: $.string()
  gcpUserName:
    Contract: $.string()
  gcpPassword:
    Contract: $.string()
  enableAutoCreationGCE:
    Contract: $.bool()
    Default: false
  openVPNServerIP:
    Contract: $.string()
  gcePrivateKey:
    Contract: $.string()
  gcpMinionCount:
    Contract: $.int()
    Default: 0
  autoScaling:
    Contract: $.bool()
    Default: false
  curExistingNodesCount:
    Contract: $.int()
    Default: 0
    Usage: InOut

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()


  deployInstance:
    Body:
      - If: not $.getAttr(instanceDeployed, false)
        Then:
          - $._environment.reporter.report($this, 'Creating Kubernetes Master')
          - $.super($.deployInstance())
          - $.setAttr(instanceDeployed, true)


  setupEtcd:
    Body:
      - If: not $.getAttr(etcdConfigured, false)
        Then:
          - $._environment.reporter.report($, 'Configuring etcd master node')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('MasterEtcdSetup.template').bind(dict(
                name => $.instance.name,
                ip => $.getIp()
              ))
          - $.instance.agent.call($template, $resources)
          - $.setAttr(etcdConfigured, true)


  setupNode:
    Body:
      - If: not $.getAttr(nodeConfigured, false)
        Then:
          - $resources: new(sys:Resources)
          - $._environment.reporter.report($this, 'Setup Flannel network on master node')
          - $template: $resources.yaml('SetupFlannelMaster.template')
          - $.instance.agent.call($template, $resources)

          - $._environment.reporter.report($this, 'Setup Kubernetes API host')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('KubeMasterSetup.template').bind(dict(
                name => $.instance.name,
                ip => $.getIp()
              ))
          - $.instance.agent.call($template, $resources)
          - $.setAttr(nodeConfigured, true)
          - $msg: 'Kubernetes API is now available at http://{0}:8080'
          - $ip: coalesce($.instance.floatingIpAddress, $.getIp())
          - $._environment.reporter.report($this, $msg.format($ip))

  putFile:
    Arguments:
      - fileContent:
          Contract: $.string().notNull()
      - path:
          Contract: $.string().notNull()
      - helpText:
          Contract: $.string()
          Default: null
      - ignoreErrors:
          Contract: $.bool().notNull()
          Default: false

    Body:
      - $data: base64encode($fileContent)
      - $resources: new(sys:Resources)
      - If: $helpText != null
        Then:
          - $planName: $helpText
        Else:
          - $planName: format('Put to {0}', $path)
      - $template: $resources.yaml('PutFile.template').bind(dict(
            path => $path,
            fileContent => $data,
            planName => $planName,
            verifyExitcode => not $ignoreErrors
          ))
      - Return: $.instance.agent.call($template, $resources)

  setupGCPScale:
    Body:
      - If: $.enableAutoCreationGCE = true
        Then:
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('GCPScaleSetup.template')
          - $.instance.agent.call($template, $resources, 600)
          - $.putFile($.gcePrivateKey, '/etc/autoscale/MuranoAppDevelopment.json')
      - If: $.enableAutoCreationGCE = true or $.enableExistingNodes = true
        Then:
          - $._environment.reporter.report($this, 'Setting up GCE scaling')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('GCPCommonFilesSetup.template')
          - $.instance.agent.call($template, $resources, 600)

  setupAutoscale:
    Body:
      - If: not $.getAttr(autoscaleConfigured, false)
        Then:
          - If: $.autoScaling = true
            Then:
              - $resources: new(sys:Resources)
              - If: $.enableExistingNodes = false
                Then:
                  - $.staticNodes: 0
                Else:
                  - $.existingNodesArray: $.existingNodes.split(',')
                  - $.staticNodes: len($.existingNodesArray)
              - If: $.enableAutoCreationGCE = false
                Then:
                  - $.autoCreationNodes: 0
                Else:
                  - $.autoCreationNodes: $.gcpMinionCount
              - $totalGcpNodeCount: $.staticNodes + $.autoCreationNodes
              - $._environment.reporter.report($this, 'Setting up Autoscale on Master Node')
              - $template: $resources.yaml('AutoScale.template').bind(dict(
                    maxMinionCount => $.maxMinionCount,
                    minionCount => $.minionCount,
                    maxCPUusage => $.maxCPUusage,
                    minCPUusage => $.minCPUusage,
                    ip => $.getIp(),
                    environmentName =>  $._environment.name,
                    openstackIP => $.openstackIP,
                    tenantName => $.tenantName,
                    userName => $.userName,
                    userPassword => $.userPassword,
                    totalGceNodes => $totalGcpNodeCount
                  ))
              - $.instance.agent.call($template, $resources)
          - $.setAttr(autoscaleConfigured, true)

  addGceNode:
    Arguments:
      - ip:
          Contract: $.string().notNull()
      - nodeType:
          Contract: $.string().notNull()
      - username:
          Contract: $.string().notNull()
      - password:
          Contract: $.string().notNull()
    Body:
      - $resources: new(sys:Resources)
      - $msg: 'Adding node {0} to Cluster'
      - $._environment.reporter.report($this, $msg.format($ip))
      - $template: $resources.yaml('AddGceNode.template').bind(dict(
            ip => $ip,
            type => $nodeType,
            username => $.gcpUserName,
            password => $.gcpPassword,
            masterIp => $.getIp()
          ))
      - $.instance.agent.call($template, $resources, 600)

  deleteGceNode:
    Body:
      - $resources: new(sys:Resources)
      - $.curExistingNodesCount: $.curExistingNodesCount - 1
      - $template: $resources.yaml('DeleteGceNode.template').bind(dict(
            type => 'existing',
            username => $.gcpUserName
          )) 
      - $.instance.agent.call($template, $resources, 600)

  createNewGceNode:
    Body:
      - $resources: new(sys:Resources)
      - $.name: format('murano-k8s-{0}', randomName()) 
      - $msg: 'Creating a new GCE instance {0}'
      - $._environment.reporter.report($this, $msg.format($.name))
      
      - $template: $resources.yaml('CreateGceNode.template').bind(dict(
            name => $.name,
            zone => 'us-central1-f'
          ))
      - $gce_ip: $.instance.agent.call($template, $resources, 180)
      - $msg: 'New GCE instance created with external IP: {0}'
      - $._environment.reporter.report($this, $msg.format($gce_ip))
      - Try:
        - $._environment.reporter.report($this, 'Verifying and installing prerequisites')
        - $template: $resources.yaml('CheckPrerequisites.template').bind(dict(
              ip => $gce_ip,
              username => 'root',
              password => ''
            ))
        - $.instance.agent.call($template, $resources, 120)
        - $._environment.reporter.report($this, 'Creating VPN Connection')
        - $template: $resources.yaml('CreateVPN.template').bind(dict(
              ip => $gce_ip,
              openVPNServerIP => $.openVPNServerIP
            ))
        - $tap_ip: $.instance.agent.call($template, $resources, 120)
        - $msg: 'VPN connection established with IP: {0}'
        - $._environment.reporter.report($this, $msg.format($tap_ip))
        - $._environment.reporter.report($this, 'Adding to Kubernetes Cluster')
        - $template: $resources.yaml('AddNewGceNode.template').bind(dict(
              ip => $tap_ip,
              type => 'new',
              masterIp => $.getIp(),
              name => $.name
            ))
        - $.instance.agent.call($template, $resources, 240)
        Catch:
        - As: e
          Do:
          - $._environment.reporter.report_error($this, $e.message)
          - $msg: 'Deleting instance {0}'
          - $._environment.reporter.report($this, $msg.format($.name))
          - $template: $resources.yaml('TerminateGceNode.template').bind(dict(
                name => $.name,
                zone => 'us-central1-f'
              ))
          - $.instance.agent.call($template, $resources, 180)

  deleteNewGceNode:
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('DeleteGceNode.template').bind(dict(
            type => 'new',
            username => $.gcpUserName
          )) 
      - $instanceName: $.instance.agent.call($template, $resources, 180)
      - If: len($instanceName) > 5
        Then:
          - $template: $resources.yaml('TerminateGceNode.template').bind(dict(
                name => $instanceName,
                zone => 'us-central1-f'
              ))
          - $.instance.agent.call($template, $resources, 180)
        Else:
          - $.curExistingNodesCount: $.curExistingNodesCount - 1
