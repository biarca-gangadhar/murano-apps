#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: io.murano.apps.docker.kubernetes
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system

Name: KubernetesMasterNode

Extends: KubernetesNode

Properties:
  maxMinionCount:
    Contract: $.string()
    Default: ''
  minionCount:
    Contract: $.string()
    Default: ''
  maxCPUusage:
    Contract: $.string()
    Default: ''
  minCPUusage:
    Contract: $.string()
    Default: ''
  openstackIP:
    Contract: $.string()
    Default: ''
  tenantName:
    Contract: $.string()
    Default: ''
  userName:
    Contract: $.string()
    Default: ''
  userPassword:
    Contract: $.string()
    Default: ''
  enableExistingNodes:
    Contract: $.bool()
    Default: false
  existingNodesArray:
    Contract: [$.string()]
    Default: ''
  gcpUserName:
    Contract: $.string()
    Default: ''
  gcpPassword:
    Contract: $.string()
    Default: ''
  enableAutoCreationGCE:
    Contract: $.bool()
    Default: ''
  openVPNServerIP:
    Contract: $.string()
    Default: ''
  gcePrivateKey:
    Contract: $.string()
    Default: ''
  gcpMinionCount:
    Contract: $.int()
    Default: 0
  autoScaling:
    Contract: $.bool()
  curExistingNodesCount:
    Contract: $.int()
    Default: 0
    Usage: InOut

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()


  deployInstance:
    Body:
      - If: not $.getAttr(instanceDeployed, false)
        Then:
          - $._environment.reporter.report($this, 'Creating Kubernetes Master')
          - $.super($.deployInstance())
          - $.setAttr(instanceDeployed, true)


  setupEtcd:
    Body:
      - If: not $.getAttr(etcdConfigured, false)
        Then:
          - $._environment.reporter.report($, 'Configuring etcd master node')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('MasterEtcdSetup.template').bind(dict(
                name => $.instance.name,
                ip => $.getIp()
              ))
          - $.instance.agent.call($template, $resources)
          - $.setAttr(etcdConfigured, true)


  setupNode:
    Body:
      - If: not $.getAttr(nodeConfigured, false)
        Then:
          - $resources: new(sys:Resources)
          - $._environment.reporter.report($this, 'Setup Flannel network on master node')
          - $template: $resources.yaml('SetupFlannelMaster.template')
          - $.instance.agent.call($template, $resources)

          - $._environment.reporter.report($this, 'Setup Kubernetes API host')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('KubeMasterSetup.template').bind(dict(
                name => $.instance.name,
                ip => $.getIp()
              ))
          - $.instance.agent.call($template, $resources)
          - $.setAttr(nodeConfigured, true)
          - $msg: 'Kubernetes API is now available at http://{0}:8080'
          - $ip: coalesce($.instance.floatingIpAddress, $.getIp())
          - $._environment.reporter.report($this, $msg.format($ip))

  setupAutoscale:
    Body:
      - If: not $.getAttr(autoscaleConfigured, false)
        Then:
          - If: $.autoScaling = true
            Then:
              - $resources: new(sys:Resources)
              - If: $.enableExistingNodes = false
                Then:
                  - $.staticNodes: 0
                Else:
                  - $.staticNodes: len($.existingNodesArray)
              - If: $.enableAutoCreationGCE = false
                Then:
                  - $.autoCreationNodes: 0
                Else:
                  - $.autoCreationNodes: $.gcpMinionCount
              - $totalGcpNodeCount: $.staticNodes + $.autoCreationNodes
              - $._environment.reporter.report($this, 'Setting up Autoscale on Master Node')
              - $template: $resources.yaml('AutoScale.template').bind(dict(
                    maxMinionCount => $.maxMinionCount,
                    minionCount => $.minionCount,
                    maxCPUusage => $.maxCPUusage,
                    minCPUusage => $.minCPUusage,
                    ip => $.getIp(),
                    environmentName =>  $._environment.name,
                    openstackIP => $.openstackIP,
                    tenantName => $.tenantName,
                    userName => $.userName,
                    userPassword => $.userPassword,
                    totalGceNodes => $totalGcpNodeCount
                  ))
              - $.instance.agent.call($template, $resources)
          - $.setAttr(autoscaleConfigured, true)
